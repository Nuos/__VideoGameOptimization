第一章
  优化的基础
  
    所谓优化，维基百科将之定义为一个修缮一个体系的过程，以达到使其某一方面更具效率，或使其某一方面消耗更少资源。
  但是，为什么需要对你的代码进行优化？
  
    每款游戏的可使用资源都有某一固定有限数量的额度，在那个可能的虚拟世界中，游戏开发者必须创造出一种非常强烈的绝美体验。
  为迎合用户的需求，那必须是一种尽可能好的体验。
  
    优化代码意味着，单位计算能力单元内的工作量增加、且效率最优。而通过优化CPU 和 GPU的使用方式，可以支持更多的多边形、支持更多的像素、
  更多的物理设备、更多的AI、更灵敏的响应，以及需要更多的付出，以此造就更有趣和更优质的虚拟效果，而这些元素将会创建出革命性的视频游戏。
  
    优化必须基于统领全局的筹谋。首先要纵观整幅大的蓝图,然后向细处逐步展开，直到发现导致应用程序缺陷的具体明确的问题。
  若非全局统筹谋划，就会存在劳而无功的风险。一般地，许多优化新手会选择局部微观的，根据某一具体要求进行优化。
  但是截止日期迫在眉睫，将时间浪费在逐行优化上将会得不偿失。
  
    优化过程极其简单。
    首先，从系统全局的角度进行谋划；然后，确认性能低下的可重复性情景；之后，度量在此情景下计算能力或内存都用于何处；
  之后，采取措施以降低消耗；最后，测试是否已经不能再进一步对此情形进行优化。若已优化的足够完善，就算是优化完成；
  否则，查找下一处瓶颈之所在，并重复以上步骤。
  
    一个优秀的优化者在此性能优化过程中运用一系列技术。而接下来的所有内容，都是寡欲如何迅速、稳定可靠的进行优化，
  并且基于一个完善可重复的操作步骤。
  
    本文起始于，讨论以下内容，以及回答优化的原因、优化的位置、优化的时间。
    
      优化基准准则：
        #1 基准点   创建一个可重复的示例例子，以重现该问题情景。
        #2 度量     设立一个内存基准线，并计算资源消耗。
        #3 检测     发现程序中存在问题的那一部分，包括滥用资源(内存、运算能力).
        #4 解决     通过测量确定是否有所改善。
        #5 重复     重复以上操作步骤，直到实现性能优化目标。
        
  
  ## Getting to Better Optimization
    任何遵循以下基本优化过程的人，最终都会提高其游戏的运行速度。
  存在一种情景[scene001]，即编写一个程序，然后毫无章法随机的改动源代码，以提高帧率。
  该情景[scene001]是一种基于每行代码、局部的代码优化的机制。然而，这种优化策略将使一个好的优化者的努力付诸东流。
  
    本文的目标是帮助一个软件开发者成长为一个伟大的优化者。在此过程中，开发者将会获得一种体验、一种技能以及必要的知识；
  同时，开发者需要有耐心以及本能的直觉。毕竟，优化是构建伟大游戏的关键一步。
    
    
