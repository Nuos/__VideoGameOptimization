引言
第一章   
  优化的基础知识
    更好的优化
    优化的周期
      1: 优化的标准
      2: 检测
      3: 解决
      4: 核查
      5: 反复
      
    优化重点及瓶颈
      优化重点
      优化瓶颈
      
    权衡
    
    优化层级
      系统层级
      算法层级
      微观层级
    
    优化陷阱
      优化假设
      初步优化
      基于单一 Machine 的优化
      调试模式优化
      糟糕的标准
    
    同步
    
    中间步骤
    
    Big O Notation (https://en.wikipedia.org/wiki/Big_O_notation)
    
    结论
    
    
  第二章
    项目规划
    
      性能优化预算
        详细说明
        开发时间节点
        
      典型的项目开发规划
      
      基于预算的最大化收益
      
      性能表现的可视化
      
      慢的含义
        高帧率
        一致性的价值
        
      结论


  第三章
    工具
    
      Instrusiveness(?)
      
      工具类型
        性能测试工具
        系统监视器
        系统调整器
      
      Timer 101
      
      编码工具
        Simple Timing
        分层级剖析
        计数器
        分析报告
        
      Tool Spotlight
        Intel VTune
          Counter Monitor
          Sampling
          Call Graph
        Microsoft PIX for Windows (https://en.wikipedia.org/wiki/PIX_(Microsoft))
        NVIDIA PerfHUD (https://developer.nvidia.com/nvidia-perfhud-es)
        NVIDIA FX Composer (https://developer.nvidia.com/fx-composer)
        DirectX Debug Runtime ( ? )
        gprof
        AMD CodeAnalyst
        AMD GPU PerfStudio
      
      结论
      
      原文引用链接
      

  第四章
    硬件基础
      
      内存
        寄存器和高速缓冲存储器 Registers and Caches
        内存映射 (Memory Mapping)
        动态随机访问内存 (Dynamic Random Access Memory)
        直接内存访问 (Direct Memory Access)
        虚拟内存 (Virtual Memory)
        图形处理器和内存 (GPU and Memory)
        对齐和抓取 (Alignment and Fetching)
        高速缓冲存储器 (Caching)
      
      中央处理器 (CPU)
        指令的生存周期
          加载/抓取/解码
          执行
          退出
        无序运行
        数据依赖
        分支和分支预测单元
        多线程同步
        多核 (Multi-Core)
        
      图形处理器: 从 API 到 Pixel
        应用程序对API的调用
        几何图元 (Geometry)
        光栅化 (Rasterization)
        
      图形处理器性能术语 (GPU Performance Terms)
        GPU 的可编程性
        着色器硬件支持 (Shader Hardware)
        着色器语言 (Shader Languages)
        着色器模型 (Shader Model)
        着色器和流水线处理 (Shaders and Stream Processing)
        
      结论
      
      原文引用链接


  第五章
    视频游戏的整体性优化
    
      整体性 -最优的方法
        类比 和一个整体性角度的方法
        动力来自系统
        
      过程
      
      基准
      
      图形处理器的使用 (GPU Utilization)
        决策
        工具
        
      中央处理器的边界: 纵览 (CPU Bound: Overview)
      
      中央处理器: 可编程边界 (CPU: Source Bound)
        期望
        工具
        第三方模块边界
        
      图形处理器边界 (GPU Bound)
        (Pre-Unified Shader Architecture)
          工具
        (Unified Shader Architecture)
          工具
        内核 (Kernels)
          图形处理器内的权衡 (Balancing Within the GPU)
          片元阻塞 (Fragment Occlusion)
      
      图形卡总线 (Graphics Bus)
      
      示例
      
      结论
      
      原文引用链接


  第六章
    中央处理器边界: 内存
    
      内存问题检测
      
      解决方案
      
      预抓取 (Pre-Fetching)
      
      访问模式和高速缓冲存储器 (Access Patterns and Cache)
      
    
      
