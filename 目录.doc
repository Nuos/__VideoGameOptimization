引言
第一章   
  优化的基础知识
  (注释:这是本地服务器测试代码请自行忽略本注释 Thanks)
    更好的优化
    
    优化的周期
      1: 优化的标准
      2: 检测
      3: 解决
      4: 核查
      5: 反复
      
    优化重点及瓶颈
      优化重点
      优化瓶颈
      
    权衡
    
    优化层级
      系统层级
      算法层级
      微观层级
    
    优化陷阱
      优化假设
      初步优化
      基于单一 Machine 的优化
      调试模式优化
      糟糕的标准
    
    同步
    
    中间步骤
    
    Big O Notation (https://en.wikipedia.org/wiki/Big_O_notation)
    
    结论
    
    
  第二章
    项目规划
    
      性能优化预算
        详细说明
        开发时间节点
        
      典型的项目开发规划
      
      基于预算的最大化收益
      
      性能表现的可视化
      
      慢的含义
        高帧率
        一致性的价值
        
      结论


  第三章
    工具
    
      Instrusiveness(?)
      
      工具类型
        性能测试工具
        系统监视器
        系统调整器
      
      Timer 101
      
      编码工具
        Simple Timing
        分层级剖析
        计数器
        分析报告
        
      Tool Spotlight
        Intel VTune
          Counter Monitor
          Sampling
          Call Graph
        Microsoft PIX for Windows (https://en.wikipedia.org/wiki/PIX_(Microsoft))
        NVIDIA PerfHUD (https://developer.nvidia.com/nvidia-perfhud-es)
        NVIDIA FX Composer (https://developer.nvidia.com/fx-composer)
        DirectX Debug Runtime ( ? )
        gprof
        AMD CodeAnalyst
        AMD GPU PerfStudio
      
      结论
      
      原文引用链接
      

  第四章
    硬件基础
      
      内存
        寄存器和高速缓冲存储器 Registers and Caches
        内存映射 (Memory Mapping)
        动态随机访问内存 (Dynamic Random Access Memory)
        直接内存访问 (Direct Memory Access)
        虚拟内存 (Virtual Memory)
        图形处理器和内存 (GPU and Memory)
        对齐和抓取 (Alignment and Fetching)
        高速缓冲存储器 (Caching)
      
      中央处理器 (CPU)
        指令的生存周期
          加载/抓取/解码
          执行
          退出
        无序运行
        数据依赖
        分支和分支预测单元
        多线程同步
        多核 (Multi-Core)
        
      图形处理器: 从 API 到 Pixel
        应用程序对API的调用
        几何图元 (Geometry)
        光栅化 (Rasterization)
        
      图形处理器性能术语 (GPU Performance Terms)
        GPU 的可编程性
        着色器硬件支持 (Shader Hardware)
        着色器语言 (Shader Languages)
        着色器模型 (Shader Model)
        着色器和流水线处理 (Shaders and Stream Processing)
        
      结论
      
      原文引用链接


  第五章
    视频游戏的整体性优化
    
      整体性 -最优的方法
        类比 和一个整体性角度的方法
        动力来自系统
        
      过程
      
      基准
      
      图形处理器的使用 (GPU Utilization)
        决策
        工具
        
      中央处理器的边界: 纵览 (CPU Bound: Overview)
      
      中央处理器: 可编程边界 (CPU: Source Bound)
        期望
        工具
        第三方模块边界
        
      图形处理器边界 (GPU Bound)
        (Pre-Unified Shader Architecture)
          工具
        (Unified Shader Architecture)
          工具
        内核 (Kernels)
          图形处理器内的权衡 (Balancing Within the GPU)
          片元阻塞 (Fragment Occlusion)
      
      图形卡总线 (Graphics Bus)
      
      示例
      
      结论
      
      原文引用链接


  第六章
    中央处理器边界: 内存
    
      内存问题检测
      
      解决方案
      
      预抓取 (Pre-Fetching)
      
      访问模式和高速缓冲存储器 (Access Patterns and Cache)
        随机性 (Randomness)
        流 (Streams)
        (AOS vs. SOA)
        解决方案: 逐步解析 (Solution:Strip Mining)
        
      栈区, 全局区, 堆区
        栈区
        全局区
        堆区
        解决方案: 禁止分配资源
        解决方案: 先行分配
        解决方案: 内存池
        解决方案: 禁止构造或销毁
        解决方案: 时间限制内存池 (Time-Scoped Pools)
      
      运行时性能
        别名 (Aliasing)
        运行时内存对齐 (Runtime Memory Alignment)
        临界区问题修复 (Fix Critical Stride Issue)
      
      SSE指令集加载和预抓取 (SSE loads and Pre-Fetches)
        (https://zh.wikipedia.org/wiki/SSE)
        (https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions)
      
      合并式写入的内存 (Write-Combined Memory)
      
      结论
  

  第七章
    中央处理器边界: 计算
    
      微优化 (Micro-Optimizations)
      
      计算的局限 (Compute Bound)
      
      查询表 (Lookup Table)
      
      记忆表 (Memoization)
      
      函数内联化 (Function Inlining)
      
      单元预测 (Branch Prediction)
        使分支单元更加可预测 (Make Branches More Predictable)
        移除分支单元 (Remove Branches)
        基于导向的优化 (Profile-Guided Optimization)
      
      循环展开 (Loop Unrolling)
      
      浮点数的运算 (Floating-Point Math)
      
      减慢指令 (Slow Instructions)
        平方根 (Square Root)
        位运算 (Bitwise Operations)
        数据类型转换 (Datatype Conversions)
      
      SSE指令集 (SSE Instructions)
        历史回顾 (History)
        基础回顾 (Basics)
        示例说明: 添加到 SIMD (Example: Adding with SIMD)
      
      相信编译器 (Trusting the Compiler)
        移除常量循环代码 (Removing Loop Invariant Code)
        巩固冗余函数 (Consolidating Redundant Functions)
        循环展开 (Loop Unrolling)
        跨目标文件优化 (Cross-.Obj Optimizations)
        具体到硬件优化 (Hardware-Specific Optimizations)
        
        结论
        
        原文引用的著作 (Works Cited)
  
  
  第八章
    从中央处理器到图形处理器
      
      工程项目生命周期与你
      
      项目失败的重要点 (Points of Project Failure)
        同步
        限制性管理
        资源管理
        全局性顺序
        工具
        调试
        
      管理API
        禁止任何假设
        构建正确的封装
        状态变化
        绘图调用
        状态块
        (Instancing and Batching)
        渲染管理器
        渲染队列
        
      VRAM管理
        设备重置处理 (Dealing with Device Resets)
        资源上传或锁定 (Resource Uploading/Locks)
        资源生存期
        小心碎片
        
      其它技巧
        (Frame Run-Ahead)
        (Lock Culling)
        Stupid Texture (Debug) Tricks
        
      结论
      
      
  第九章
    图形处理器
    
      图形处理器分类
      
      3D渲染管线
      
      我就是GPU的边界!? (I'm GPU Bound!?)
      
      一帧看起来像什么?
      
      (Front End vs. Back End)
        (Back End)
          (Fill-Rate)
          渲染目标格式
          混合调配
          着色
          纹理采样
          深度剔除 (Z/Stencil Culling)
          清理
        (Front End)  
          顶点变换 (Vertex Transformation)
          顶点提取和高速缓存 (Vertex Fetching and Caching)
          曲面细分 (Tessellation)
      
      特例
        (MSAA)
        光线和阴影
        正向渲染 VS. 延时渲染 (Forward vs. Deferred Rendering)
        (MRT)
        
      结论
      
  第十章
    着色器
    
    
  第十一章
    联网
    
  第十二章
    大规模存储
    
  第十三章
    同步
    
  第十四章
    控制台
    
  第十五章
    语言的管理
    
  第十六章
    基于GPU的广义性运算 (GPGPU)

